[language-server.efm-lsp-prettier]
command = "efm-langserver"
[language-server.efm-lsp-prettier.config]
documentFormatting = true
[[language-server.efm-lsp-prettier.config.languages.typescript]]
formatCommand ="prettierd --stdin-filepath ${INPUT}"
formatStdin = true
[[language-server.efm-lsp-prettier.config.languages.typescriptreact]]
formatCommand ="prettierd --stdin-filepath ${INPUT}"
formatStdin = true
[[language-server.efm-lsp-prettier.config.languages.css]]
formatCommand ="prettierd --stdin-filepath ${INPUT}"
formatStdin = true
[[language-server.efm-lsp-prettier.config.languages.scss]]
formatCommand ="prettierd --stdin-filepath ${INPUT}"
formatStdin = true
[[language-server.efm-lsp-prettier.config.languages.html]]
formatCommand ="prettierd --stdin-filepath ${INPUT}"
formatStdin = true

[language-server.astro-ls]
command = "astro-ls"
args = [ "--stdio" ]
config = {"typescript" = {"tsdk" = "/home/luiznormanha/.volta/tools/image/packages/typescript/lib/node_modules/typescript/lib/", "environment" = "node"} }


[language-server.eslint]
args = ["--stdio"] # should come by def with helix
command = "vscode-eslint-language-server"

[language-server.eslint.config]
codeActionsOnSave = { mode = "all", "source.fixAll.eslint" = true }
format = { enable = true }
nodePath = ""
quiet = false
rulesCustomizations = []
run = "onType"
validate = "on"
experimental = {}
problems = { shortenToSingleLine = false }

[language-server.eslint.config.codeAction]
[language-server.eslint.config.codeAction.disableRuleComment]
enable = true
location = "separateLine"

[language-server.eslint.config.codeAction.showDocumentation]
enable = true # why?

[language-server.eslint.config.codeActionOnSave]
enable = true
mode = "fixAll"

[language-server.eslint.config.workingDirectory]
mode = "location" # do we need to override this?

[language-server.vscode-json-language-server.config]
json = { validate = { enable = true }, format = { enable = true } }
provideFormatter = true

[language-server.vscode-css-language-server.config]
css = { validate = { enable = true } }
scss = { validate = { enable = true } }
less = { validate = { enable = true } }
provideFormatter = true

[language-server.typescript-language-server.config]
documentFormatting = false # use eslint instead, do we have to override this ourselves? I think if eslint LSP is detected and enabled, this should be done automatically for us as generally everyone lets eslint take over linting+prettying, which uses prettier by default if detected by it

[[language]]
name = "typescript"
language-servers = [{ except-features = ["format"], name = "typescript-language-server" }, "eslint", "tailwindcss-ls"] # shouldn't need to override this
roots = ["pnpm-lock.yaml", "tsconfig.json" ] # shouldn't need to override this
formatter = { command = "prettier", args = [ "--parser", "typescript" ] }
auto-format = true

[[language]]
name = "tsx"
language-servers = [{ except-features = ["format"], name = "typescript-language-server" }, "eslint", "tailwindcss-ls"] # shouldn't need to override this
roots = ["pnpm-lock.yaml", "tsconfig.json" ] # shouldn't need to override this!
formatter = { command = "prettier", args = [ "--parser", "typescript" ] }
auto-format = true

[[language]]
name = "html"
language-servers = [ "vscode-html-language-server", "tailwindcss-ls" ]

[[language]]
name = "css"
language-servers = [ "vscode-css-language-server", "tailwindcss-ls" ]

[[language]]
name = "astro"
scope = "source.astro"
injection-regex = "astro"
file-types = ["astro"]
roots = ["package.json", "astro.config.mjs", "tsconfig.json"]
language-servers =  ["astro-ls", "tailwindcss-ls" ]
auto-format = true
